@use 'sass:string';
@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:color';
@use './variables' as variables;
@use 'include-media' as includeMedia;

@function getColor($color) {
  @return map.get(variables.$colors, $color);
}

@function setAlpha($color, $alpha: 1) {
  @return color.change(getColor($color), $alpha: $alpha);
}

@function getBreakpoint($breakpoint) {
  $breakpoints: variables.$breakpoints;
  @return map.get($breakpoints, $breakpoint);
}

@mixin media($breakpoint) {
  @include includeMedia.media-context(variables.$breakpoints) {
    @include includeMedia.media($breakpoint) {
      @content;
    }
  }
}

@mixin scrimGradient($startColor: #000, $direction: to bottom) {
  $scrimCoordinates: (
    '0%': 1,
    '10.34%': 0.9854227405,
    '19.97%': 0.944606414,
    '28.94%': 0.8819241983,
    '37.32%': 0.8017492711,
    '45.14%': 0.7084548104999999,
    '52.48%': 0.6064139942,
    '59.38%': 0.5,
    '65.89%': 0.3935860058,
    '72.08%': 0.29154518949999997,
    '77.99%': 0.19825072889999995,
    '83.68%': 0.11807580169999998,
    '89.21%': 0.055393585999999995,
    '94.63%': 0.014577259499999995,
    '100%': 0,
  );

  $hue: hue($startColor);
  $saturation: saturation($startColor);
  $lightness: lightness($startColor);
  $stops: ();

  @each $colorStop, $alphaValue in $scrimCoordinates {
    $stop: hsla($hue, $saturation, $lightness, $alphaValue)
      #{$colorStop};
    $stops: append($stops, $stop, comma);
  }

  background: linear-gradient($direction, $stops);
}

@mixin aspect-ratio($ar) {
  aspect-ratio: $ar;
  @supports not (aspect-ratio: $ar) {
    &::before {
      content: '';
      float: left;
      padding-top: calc(($ar) * 100%);
    }
    &::after {
      content: '';
      display: block;
      clear: both;
    }
  }
}

%absolute-fill {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

@mixin absolute-fill {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

@mixin base-grid {
  position: relative;
  display: grid;
  grid-template-columns:
    calc(2 * var(--gtr-36)) repeat(12, 1fr)
    calc(2 * var(--gtr-36));
  grid-template-rows: auto;
  grid-column-gap: var(--gtr-36);
  width: 100%;
  @include media('<s') {
    grid-template-columns: var(--gtr-36) repeat(12, 1fr) var(--gtr-36);
  }
}

@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) +
    str-slice($string, 2);
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function widthInCols(
  $count: 0,
  $gridWidth: var(--grid-w),
  $gutter: var(--gtr, var(--gtr-36)),
  $margin: var(--margin)
) {
  @return calc(
    $count * (($gridWidth - 2 * $margin - 11 * $gutter) / 12) +
      ($count - 1) * $gutter
  );
}

%link {
  display: block;
  max-width: fit-content;
  text-transform: uppercase;
  text-decoration: none;
}

%button {
  background: #000;
  font-size: var(--fs-16);
  text-transform: uppercase;
  text-decoration: none;
  letter-spacing: 0.1em;
  padding: 1em 1.5em;
  line-height: 1.125;
}
